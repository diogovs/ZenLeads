@page "/leads"
@using ZenLeads.Models
@using ZenLeads.Services
@inject ILeadService LeadService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>ZenLeads - Gerenciar Leads</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Gerenciar Leads</MudText>

<MudButton Variant="Variant.Filled" 
          Color="Color.Primary" 
          StartIcon="@Icons.Material.Filled.Add" 
          Class="mb-4"
          OnClick="OpenAddDialog">
    Novo Lead
</MudButton>

<MudPaper Class="pa-4">
    <MudTable Items="@_leads" 
             Dense="true" 
             Hover="true" 
             Loading="@_loading"
             LoadingProgressColor="Color.Primary" 
             SortLabel="Ordenar por"
             Filter="@(new Func<Lead, bool>(FilterLeads))">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" 
                         Placeholder="Buscar leads..." 
                         Adornment="Adornment.Start" 
                         AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" 
                         Class="mt-0"></MudTextField>
            <MudSpacer />
            <MudSelect T="LeadStatus?" 
                      Value="@_statusFiltro" 
                      ValueChanged="@(val => { _statusFiltro = val; StateHasChanged(); })"
                      Label="Filtrar por status" 
                      AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="LeadStatus?" Value="@((LeadStatus?)null)">Todos</MudSelectItem>
                <MudSelectItem T="LeadStatus?" Value="@(LeadStatus.EmAnalise)">Em Análise</MudSelectItem>
                <MudSelectItem T="LeadStatus?" Value="@(LeadStatus.MensagemEnviada)">Mensagem Enviada</MudSelectItem>
                <MudSelectItem T="LeadStatus?" Value="@(LeadStatus.Qualificado)">Qualificado</MudSelectItem>
                <MudSelectItem T="LeadStatus?" Value="@(LeadStatus.Convertido)">Convertido</MudSelectItem>
            </MudSelect>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="@(new Func<Lead, object>(x=>x.Id))">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="@(new Func<Lead, object>(x=>x.Nome))">Nome</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="@(new Func<Lead, object>(x=>x.Email))">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="@(new Func<Lead, object>(x=>x.Empresa))">Empresa</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="@(new Func<Lead, object>(x=>x.Telefone))">Telefone</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="@(new Func<Lead, object>(x=>x.Status))">Status</MudTableSortLabel></MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Nome">@context.Nome</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Empresa">@context.Empresa</MudTd>
            <MudTd DataLabel="Telefone">@context.Telefone</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                    @GetStatusText(context.Status)
                </MudChip>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                             OnClick="@(() => OpenEditDialog(context))" 
                             Title="Editar" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                             OnClick="@(() => OpenDeleteDialog(context))" 
                             Title="Excluir" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private List<Lead> _leads = new();
    private bool _loading = true;
    private string _searchString = "";
    private LeadStatus? _statusFiltro = null;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadLeads();
    }
    
    private async Task LoadLeads()
    {
        _loading = true;
        StateHasChanged();
        
        var leads = await LeadService.GetLeadsAsync();
        _leads = leads.ToList();
        
        _loading = false;
        StateHasChanged();
    }
    
    private bool FilterLeads(Lead lead) => 
        (_statusFiltro == null || lead.Status == _statusFiltro) && 
        (string.IsNullOrWhiteSpace(_searchString) ||
         lead.Nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
         lead.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
         lead.Empresa.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
         lead.Telefone.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    
    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters();
        var dialog = await DialogService.ShowAsync<LeadDialog>("Novo Lead", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadLeads();
            Snackbar.Add("Lead adicionado com sucesso!", Severity.Success);
        }
    }
    
    private async Task OpenEditDialog(Lead lead)
    {
        var parameters = new DialogParameters();
        parameters.Add("Lead", lead);
        
        var dialog = await DialogService.ShowAsync<LeadDialog>("Editar Lead", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadLeads();
            Snackbar.Add("Lead atualizado com sucesso!", Severity.Success);
        }
    }
    
    private async Task OpenDeleteDialog(Lead lead)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Deseja realmente excluir o lead '{lead.Nome}'?");
        parameters.Add("ButtonText", "Excluir");
        parameters.Add("Color", Color.Error);
        
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirmar Exclusão", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            var success = await LeadService.DeleteLeadAsync(lead.Id);
            
            if (success)
            {
                await LoadLeads();
                Snackbar.Add("Lead excluído com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Erro ao excluir o lead", Severity.Error);
            }
        }
    }
    
    private Color GetStatusColor(LeadStatus status) => status switch
    {
        LeadStatus.EmAnalise => Color.Info,
        LeadStatus.MensagemEnviada => Color.Primary,
        LeadStatus.Qualificado => Color.Warning,
        LeadStatus.Convertido => Color.Success,
        _ => Color.Default
    };
    
    private string GetStatusText(LeadStatus status) => status switch
    {
        LeadStatus.EmAnalise => "Em Análise",
        LeadStatus.MensagemEnviada => "Mensagem Enviada",
        LeadStatus.Qualificado => "Qualificado",
        LeadStatus.Convertido => "Convertido",
        _ => status.ToString()
    };
} 